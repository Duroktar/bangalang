# Grammar

----

## Lexer: string -> token[]

token:
    | STRING
    | NUMBER
    | PLUS = '+'


## Parser: token[] -> program

program        → declaration* EOF ;

declaration    → classDecl
                | letDecl
                | statement ;

classDecl      → "class" IDENTIFIER ( "<" IDENTIFIER )? "{" function* "}" ;
funDecl        → "func" function ;
letDecl        → "let" IDENTIFIER ( "=" expression )? ;

statement      → exprStmt
                | returnStmt
                | block ;

exprStmt       → expression ;
returnStmt     → "return" expression? ;
block          → "{" declaration* "}" ;

function       → IDENTIFIER "(" parameters? ")" block ;
parameters     → IDENTIFIER ( "," IDENTIFIER )* ;
arguments      → expression ( "," expression )* ;

expression     → assignment ;

assignment     → ( call "." )? IDENTIFIER "=" assignment | case ;
case           → "case" "(" term ")" "{" ( choice )+ "}" | term ;
term           → call ( ( "-" | "+" ) call )* ;
call           → primary ( "(" arguments? ")" )* ;
primary        → atom | "(" expression ")" ;

choice         → atom "->" case ;

atom           →
                | "true" | "false"
                | NUMBER | STRING
                | IDENTIFIER ;

